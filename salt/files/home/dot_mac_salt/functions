#   ---------------------------------------
#   USEFUL Bash FUNCTIONS
#   ---------------------------------------
#
#   If you want to show the function description in the "mac_salt function" command you must use two # to start line.
#


##  port <port to check>:  check what is using a specific port
#   -------------------------------------------------------------------
function port() {
  if [ "$1" -eq "$1" ] 2>/dev/null ; then
    lsof -i :$1
  else
    lsof -i
  fi
}


#  _cleanup:  clean up brew packages and old gems
#   -------------------------------------------------------------------
function _cleanup() {
  echo -e "\nCleaning Up Old Gems..."
  gem cleanup
  echo -e "\nCleaning Up Brew Packages..."
  brew cleanup
}


##  update:  Update brew packages and gems. -c --cleanup
#   -------------------------------------------------------------------
function update() {
  echo -e "Gem Updates..."
  gem update
  echo -e "\nBrew Updates..."
  brew update
  brew upgrade

  while [ ! $# -eq 0 ]; do
    case "$1" in
      --cleanup | -c)
        _cleanup
        shift
        ;;
      *)
        shift
        ;;
    esac
  done
}


#   _unset_ssh_proxy:  remove ProxyCommand line from Host *
#   -------------------------------------------------------------------
function _unset_ssh_proxy() {
  FILE=$HOME/.ssh/config
  LASTLINE=`tail -1 $FILE`
  if [[ $(echo $LASTLINE | head -c 1) != '#' ]] ; then
    # Remove the last line from ssh/config if it's a ProxyCommand
    FIRSTWORD=`echo $LASTLINE | cut -d " " -f 1`
    if [[ $FIRSTWORD == 'ProxyCommand' ]] ; then
      cp $FILE $FILE.tmp &> /dev/null
      sed '$ d' $FILE.tmp > $FILE
      command rm -f $FILE.tmp
    fi
  fi
}


#   _set_ssh_proxy:  add ProxyCommand line to Host * in ssh/config
#   -------------------------------------------------------------------
function _set_ssh_proxy() {
  FILE=$HOME/.ssh/config
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "you must pass a proxy host in \$1 and port in \$2"
    echo
    echo "_set_ssh_proxy adc-proxy.oracle.com 80"
    return 1
  fi

  echo "Setting SSH Proxy Settings: $1:$2"
  _unset_ssh_proxy
  echo -e "\tProxyCommand /usr/local/bin/corkscrew $1 $2 %h %p" >> $FILE
}


#   _unset_gem_proxy:  remove proxy setting from gemrc
#   -------------------------------------------------------------------
function _unset_gem_proxy() {
  FILE=$HOME/.gemrc
  LASTLINE=`tail -1 $FILE`
  if [[ $(echo $LASTLINE | head -c 1) != '#' ]] ; then
    FIRSTWORD=`echo $LASTLINE | cut -d " " -f 1`
    if [[ $FIRSTWORD == 'http-proxy:' ]] ; then
      cp $FILE $FILE.tmp &> /dev/null
      sed '$ d' $FILE.tmp > $FILE
      command rm -f $FILE.tmp
    fi
  fi
}


#   _set_gem_proxy: add proxy setting to gemrc
#   -------------------------------------------------------------------
function _set_gem_proxy() {
  FILE=$HOME/.gemrc
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "you must pass a proxy host in \$1 and port in \$2"
    echo
    echo "_set_ssh_proxy adc-proxy.oracle.com 80"
    return 1
  fi

  echo "Setting Gem Proxy Settings: http://$1:$2"
  _unset_gem_proxy
  echo -e "http-proxy: http://$1:$2" >> $FILE
}


#   _set_proxy:  setup proxy settings for env, ssh, gem, and git
#   -------------------------------------------------------------------
function _set_proxy() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "you must pass a proxy host in \$1 and port in \$2"
    echo
    echo "_set_proxy adc-proxy.oracle.com 80"
    return 1
  fi

  echo "Setting Environment Proxy Settings: http://$1:$2"
  export http_proxy=http://$1:$2;
  export HTTP_PROXY=http://$1:$2;
  export https_proxy=http://$1:$2;
  export HTTPS_PROXY=http://$1:$2;
  echo "Setting npm Proxy Settings: $1:$2"
  npm config set proxy http://www-proxy.us.oracle.com:80
  npm config set https-proxy http://www-proxy.us.oracle.com:80
  echo "Setting git Proxy Settings: $1:$2"
  git config --global http.proxy http://$1:$2;
  git config --global https.proxy http://$1:$2;
  _set_ssh_proxy $1 $2
  _set_gem_proxy $1 $2
}


##  disable_proxy:  removes all proxy settings from terminal (env, git, ssh, gem)
#   -------------------------------------------------------------------
function disable_proxy() {
  echo "Unsetting Environment Proxy"
  unset http_proxy;
  unset https_proxy;
  unset HTTP_PROXY;
  unset HTTPS_PROXY;
  echo "Unsetting npm Proxy"
  npm config delete proxy
  npm config delete https-proxy
  echo "Unsetting git Proxy"
  git config --global --replace-all http.proxy "";
  git config --global --replace-all https.proxy "";
  echo "Unsetting SSH Proxy"
  _unset_ssh_proxy
  echo "Unsetting Gem Proxy"
  _unset_gem_proxy
}


##  eject <disk to eject>:  eject mounted disk
#   -------------------------------------------------------------------
function eject() {
  if [ -z "$1" ]; then
    echo "eject
Usage:
  eject /dev/disk_to_eject
    "
    return 1
  fi
  diskutil eject $1
}


##  iso_to_usb <iso file> <disk to use>:  convert iso file to UDRW to use on bootable USB stick
#   -------------------------------------------------------------------
function iso_to_usb() {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "convert iso file to UDRW to use on bootable USB stick
Usage:
  iso_to_usb iso_file /dev/disk_to_use
    "
    return 1
  fi
  TIMESTAMP=$(sudo date +%s)
  TMP_FILE="/tmp/__"$TIMESTAMP"__file.img"
  echo "Converting ISO file to UDRW format"
  hdiutil convert -format UDRW -o "$TMP_FILE" $1
  if [ $? -eq 0 ]; then
    echo "Erasing USB"
    diskutil unmountDisk force $2
    diskutil partitionDisk $2 1 "Free Space" "unused" "100%"
  else
    command rm $TMP_FILE.dmg
  fi

  img_to_usb $TMP_FILE.dmg $2

  if [ $? -eq 0 ]; then
    echo "Removing tmp file"
    command rm $TMP_FILE.dmg
  fi
}


##  img_to_usb <img file> <disk to use>:  import img file onto a USB
#   -------------------------------------------------------------------
function img_to_usb() {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "import img file onto a USB
Usage:
  img_to_usb img_file /dev/disk_to_use
    "
    return 1
  fi
  if [ $? -eq 0 ]; then
    diskutil unmountDisk force $2
    echo "Copying Image to USB"
    sudo dd if=$1 of=$2 bs=1m
  fi
  if [ $? -eq 0 ]; then
    echo "Ejecting Disk"
    diskutil eject $2
  fi
  echo "Finished"
}


##  fat_usb <disk name> <disk to use>:  Initialze USB with FAT32 file system
#   -------------------------------------------------------------------
function fat_usb() {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "Initialze USB with FAT32 file system
Usage:
  exfat_usb disk_name /dev/disk_to_use
    "
    return 1
  fi
  diskutil unmountDisk $2
  diskutil partitionDisk $2 MBR FAT32 $1 0b
}


##  exfat_usb <disk name> <disk to use>:  Initialze USB with ExFat file system
#   -------------------------------------------------------------------
function exfat_usb() {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "Initialze USB with ExFat file system
Usage:
  exfat_usb disk_name /dev/disk_to_use
    "
    return 1
  fi
  diskutil unmountDisk $2
  diskutil partitionDisk $2 MBR ExFat $1 0b
}


##  journaled_usb <disk name> <disk to use>:  Initialze USB with Journaled file system
#   -------------------------------------------------------------------
function journaled_usb() {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "Initialze USB with Journaled file system
Usage:
  journaled_usb disk_name /dev/disk_to_use
    "
    return 1
  fi
  diskutil unmountDisk $2
  diskutil partitionDisk $2 GPT JHFS+ $1 0b
}


##  fix_brew_permissions:  sets ownership to current user on brew directories
#   -------------------------------------------------------------------
function fix_brew_permissions() {
  sudo chown -R $(whoami) /usr/local/bin
  sudo chown -R $(whoami) /usr/local/lib
  sudo chown -R $(whoami) /usr/local/Frameworks
  sudo chown -R $(whoami) /usr/local/Cellar
}


##  fix_ruby_permissions:  sets ownership to current user on rbenv directories
#   -------------------------------------------------------------------
function fix_ruby_permissions() {
  sudo chown -R $(whoami) $HOME/.rbenv
}


##  fix_sudo_bundle:  fixes issues caused by doing sudo bundle install
#   -------------------------------------------------------------------
function fix_sudo_bundle() {
  sudo bundle install --system
  bundle install --path ~/.gem
}


##  create_file <file_name> <size in MB>:  create file from /dev/zero
#   -------------------------------------------------------------------
function create_file() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Create file for texting
Usage:
  create_file large_text_file.txt 300
    "
    return 1
  fi
  dd if=/dev/zero of=$1 bs=1000*1000 count=$2
}


##  create_file_binary <file_name> <size in MB>:  create file from /dev/zero
#   -------------------------------------------------------------------
function create_file_binary() {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "Create file for texting
Usage:
  create_file_decimal large_text_file.txt 300
    "
    return 1
  fi
  dd if=/dev/zero of=$1 bs=1024*1024 count=$2
}


##  clear_cache_files:  clear all files from ~/Library/Caches
#   -------------------------------------------------------------------
function clear_cache_files() {
  sudo find ~/Library/Caches -type f -print0 | xargs -0 rm
  sudo find /Library/Caches -type f -print0 | xargs -0 rm
}


#   backup_home_dir:  rsync home dir to location of choice, excluding 'VirtualBox VMs', Library, Applications, .rbenv and .nodenv dirs.
#   -------------------------------------------------------------------
function backup_home_dir() {
  if [ -z "$1" ]; then
    echo "you must pass a destination directory in \$1"
    echo
    echo "backup_home_dir /Volumes/WD"
    return 1
  fi

  if [ ! -d "$1" ]; then
    echo "$1 does not exist."
    return 1
  fi

  sudo rsync --delete --progress --exclude=VirtualBox\ VMs --exclude=.local --exclude=.npm --exclude=node_modules --exclude=.m2 --exclude=.p2 --exclude=.gem --exclude=AMS --exclude=.Trash --exclude=.vagrant.d --exclude=Library --exclude=Applications --exclude=.rbenv --exclude=.nodenv -auv $HOME $1
}

#   sync:  rsync one location to second location
#   -------------------------------------------------------------------
function sync() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "You must pass a source and destination directory"
    echo
    echo "sync /Volumes/Ultra /Volumes/2TB"
    return 1
  fi

  if [ ! -d "$1" ]; then
    echo "$1 does not exist."
    return 1
  fi

  if [ ! -d "$2" ]; then
    echo "$2 does not exist."
    return 1
  fi

  rsync --delete --progress --exclude=.* -auv $1 $2
}

#   remove_gem_docs:  remove gem documentation from system
#   -------------------------------------------------------------------
function remove_gem_docs() {
  DOCDIR="$(gem env gemdir)"/doc

  if [ "$(ls -A $DOCDIR)" ]; then
    rm $DOCDIR/*
  else
    echo "There are no docs to remove."
  fi
}

#   kubernetes:  kubernetes the next word or phrase.
#   -------------------------------------------------------------------
function kubernetes() {
  if [ -z "$1" ]; then
    echo "You must pass a word or phrase \$1"
    echo
    echo "kubernetes mark"
    return 1
  fi

  RESULT=()

  for WORD in $@; do
    FIRST="$(echo $WORD | head -c 1)"
    LENGTH=$(printf "%s" "$WORD" | wc -c)
    LAST="$(echo -n $WORD | tail -c 1)"
    if (( LENGTH > 2 )); then
      RESULT+=("$FIRST$((LENGTH - 2))$LAST")
    else
      RESULT+=("$WORD")
    fi
  done

  echo ${RESULT[*]}
}

#   update_dat:  update to the latest dat file
#   -------------------------------------------------------------------
function update_dat() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "You must pass a location and version"
    echo
    echo "update_dat /Users/mlintern/Downloads/avvepo9172dat/avvdat-9172 9172"
    return 1
  fi

  /usr/local/McAfee/fmp/bin/fmp stop

  sudo mkdir /usr/local/McAfee/AntiMalware/dats/$2

  sudo cp $1/*.dat  /usr/local/McAfee/AntiMalware/dats/$2
  cd /usr/local/McAfee/AntiMalware/dats/$2
  sudo chmod 644 *.dat
  cd /usr/local/McAfee/AntiMalware/dats/
  sudo chmod 755 $2
  chown root:Virex /usr/local/McAfee/AntiMalware/dats/$2/avv*
  sudo defaults write /Library/Preferences/com.mcafee.ssm.antimalware.plist Update_DATVersion -string $2.0000

  /usr/local/McAfee/fmp/bin/fmp start

  sudo launchctl unload /Library/LaunchDaemons/com.mcafee.ssm.ScanManager.plist
  sudo launchctl load /Library/LaunchDaemons/com.mcafee.ssm.ScanManager.plist
  sudo launchctl unload /Library/LaunchDaemons/com.mcafee.ssm.ScanFactory.plist
  sudo launchctl load /Library/LaunchDaemons/com.mcafee.ssm.ScanFactory.plist
}

#   _set_color_vars: set color variables to proper values
#   -------------------------------------------------------------------
_set_color_vars() {
  Black='\[\033[0;30m\]'        # Black
  Red='\[\033[0;31m\]'          # Red
  Green='\[\033[0;32m\]'        # Green
  Yellow='\[\033[0;33m\]'       # Yellow
  Blue='\[\033[0;34m\]'         # Blue
  Purple='\[\033[0;35m\]'       # Purple
  Cyan='\[\033[0;36m\]'         # Cyan
  White='\[\033[0;37m\]'        # White
}

#   _clear_color_vars: set color variables to no color
#   -------------------------------------------------------------------
_clear_color_vars() {
  Black='\[\033[m\]'            # Color Reset
  Red='\[\033[m\]'              # Color Reset
  Green='\[\033[m\]'            # Color Reset
  Yellow='\[\033[m\]'           # Color Reset
  Blue='\[\033[m\]'             # Color Reset
  Purple='\[\033[m\]'           # Color Reset
  Cyan='\[\033[m\]'             # Color Reset
  White='\[\033[m\]'            # Color Reset
}

#   _set_ps1_help:  set_ps1 help
#   -------------------------------------------------------------------
function _set_ps1_help() {
  echo "Usage: set_ps1 [-c] [-h] [-m] [-n] [-p] [-s]"
  echo "-c: color, default"
  echo "-h: help"
  echo "-m: multi-level ps1, default"
  echo "-n: no color"
  echo "-p: plain same as n"
  echo "-s: simple ps1"
  return 0
}

##   set_ps1:  set PS1 to complex layout
#   -------------------------------------------------------------------
function set_ps1() {
  SIMPLE=false
  COLOR=true

  while test $# != 0
  do
    case "$1" in
      -c )
        COLOR=true
        ;;
      -h )
        _set_ps1_help
        ;;
      -m )
        SIMPLE=false
        ;;
      -n )
        COLOR=false
        ;;
      -p )
        COLOR=false
        ;;
      -s )
        SIMPLE=true
        ;;
      \? ) _set_ps1_help
        ;;
    esac
    shift
  done

  echo $COLOR
  echo $SIMPLE

  if [ "$COLOR" = true ]; then
    _set_color_vars
  else
    _clear_color_vars
  fi

  if [ "$SIMPLE" = true ]; then
    PS1="{{ pillar.get("simple_ps1") }}"
  else
    PS1="{{ pillar.get("base_ps1") }}"
  fi
}

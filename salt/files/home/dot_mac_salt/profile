#  ---------------------------------------------------------------------------
#
#  Description:  This file holds all my BASH configurations and aliases
#
#  Sections:
#  1.   Colors
#  2.   Environment Configuration
#  3.   Make Terminal Better (remapping defaults and adding functionality)
#  4.   File and Folder Management
#  5.   Searching
#  6.   Process Management
#  7.   Networking
#  8.   System Operations & Information
#  9.   Web Development
#  10.  Reminders & Notes
#
#  ---------------------------------------------------------------------------
#
#   If you want to show the function description in the "mac_salt function" command you must use two # to start line.
#

#   ---------------------------------------
#   1.  COLORS
#   ---------------------------------------

# Normal Colors
Black='\[\033[0;30m\]'        # Black
Red='\[\033[0;31m\]'          # Red
Green='\[\033[0;32m\]'        # Green
Yellow='\[\033[0;33m\]'       # Yellow
Blue='\[\033[0;34m\]'         # Blue
Purple='\[\033[0;35m\]'       # Purple
Cyan='\[\033[0;36m\]'         # Cyan
White='\[\033[0;37m\]'        # White

# Bold
BBlack='\[\033[1;30m\]'       # Black
BRed='\[\033[1;31m\]'         # Red
BGreen='\[\033[1;32m\]'       # Green
BYellow='\[\033[1;33m\]'      # Yellow
BBlue='\[\033[1;34m\]'        # Blue
BPurple='\[\033[1;35m\]'      # Purple
BCyan='\[\033[1;36m\]'        # Cyan
BWhite='\[\033[1;37m\]'       # White

# Background
On_Black='\[\033[40m\]'       # Black
On_Red='\[\033[41m\]'         # Red
On_Green='\[\033[42m\]'       # Green
On_Yellow='\[\033[43m\]'      # Yellow
On_Blue='\[\033[44m\]'        # Blue
On_Purple='\[\033[45m\]'      # Purple
On_Cyan='\[\033[46m\]'        # Cyan
On_White='\[\033[47m\]'       # White

NC='\[\033[m\]'               # Color Reset


#   -------------------------------
#   2.  ENVIRONMENT CONFIGURATION
#   -------------------------------

#   Change Prompt
#   ------------------------------------------------------------
# export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWDIRTYSTATE=true
# export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_STATESEPARATOR=' '

# Display Unsuccessful Exit Codes
function exit_status {
  last_status=$?
  if [ $last_status -ne 0 ]; then
    echo "[Exit: $last_status]"
  fi
}

# Timer Functions
function timer_start {
  timer=${timer:-$SECONDS}
}

function displaytime {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && printf '%d days ' $D
  (( $H > 0 )) && printf '%d hrs ' $H
  (( $M > 0 )) && printf '%d min ' $M
  (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
  printf '%d sec\n' $S
}

function timer_stop {
  TIMER_SHOW=$(($SECONDS - $timer))
  HUMAN_TIME=$(displaytime $TIMER_SHOW)
  unset timer
}

trap 'timer_start' DEBUG

PS1="{{ pillar.get("base_ps1") }}"
PS2="{{ pillar.get("base_ps2") }}"

#   Set Paths
#   ------------------------------------------------------------
export PATH="/usr/local/git/bin:/usr/local:/usr/local/sbin:/usr/local/mysql/bin:$PATH"

#   Set Default Editor (change 'vim' to the editor of your choice)
#   ------------------------------------------------------------
export EDITOR=/usr/bin/vim

#   Set default blocksize for ls, df, du
#   from this: http://hints.macworld.com/comment.php?mode=view&cid=24491
#   ------------------------------------------------------------
export BLOCKSIZE=1k

#   Add color to terminal
#   (this is all commented out as I use Mac Terminal Profiles)
#   from http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
#   ------------------------------------------------------------
#   export CLICOLOR=1
#   export LSCOLORS=ExFxBxDxCxegedabagacad


#   -----------------------------
#   3.  MAKE TERMINAL BETTER
#   -----------------------------

alias cp='cp -iv'                           # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias ll='ls -FGlha'                        # Preferred 'ls' implementation
alias lt='ls -FGlhart'                      # Sort by Timestamp newest on bottom
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias finder='open -a Finder ./'            # finder:       Opens current directory in MacOS Finder
alias f='finder'                            # f:            Opens current directory in MacOS Finder
alias ~="cd ~"                              # ~:            Go Home
alias which='type -all'                     # which:        Find executables
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias show_options='shopt'                  # Show_options: display bash options settings
alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive

##  mcd <new dir>:          Makes new Dir and jumps inside
#   ------------------------------------------------------------
function mcd () { mkdir -p "$1" && cd "$1"; }

##  trash <file>:  Moves a file to the MacOS trash
#   ------------------------------------------------------------
function trash () { command mv "$@" ~/.Trash ; }

##  ql <file>:  Opens any file in MacOS Quicklook Preview
#   ------------------------------------------------------------
function ql () { qlmanage -p "$*" >& /dev/null; }

alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'      #   lr:  Full Recursive Directory Listing

##  mans <program>:  Search manpage given in agument '1' for term given in argument '2' (case insensitive) displays paginated result with colored search terms and two lines surrounding each hit.
#           Example: mans mplayer codec
#   --------------------------------------------------------------------
function mans () {
    man $1 | grep -iC2 --color=always $2 | less
}

#   -------------------------------
#   4.  FILE AND FOLDER MANAGEMENT
#   -------------------------------

##  zipf <dir>: To create a ZIP archive of a folder
#   ------------------------------------------------------------
function zipf () { zip -r "$1".zip "$1" ; }

alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir
alias make1mb='mkfile 1m ./1MB.dat'         # make1mb:      Creates a file of 1mb size (all zeros)
alias make5mb='mkfile 5m ./5MB.dat'         # make5mb:      Creates a file of 5mb size (all zeros)
alias make10mb='mkfile 10m ./10MB.dat'      # make10mb:     Creates a file of 10mb size (all zeros)

##  cdf:  'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------
function cdf () {
  currFolderPath=$( /usr/bin/osascript <<EOT
    tell application "Finder"
      try
    set currFolder to (folder of the front window as alias)
      on error
    set currFolder to (path to desktop folder as alias)
      end try
      POSIX path of currFolder
    end tell
EOT
  )
  echo "cd to \"$currFolderPath\""
  cd "$currFolderPath"
}

##  extract <compressed file>:  Extract most know archives with one command
#   ---------------------------------------------------------
function extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}


#   ---------------------------
#   5.  SEARCHING
#   ---------------------------

alias qfind="find . -name "           # qfind:    Quickly search for file

##  ff <name>: Find file under the current directory
#   -----------------------------------------------------------
function ff () { /usr/bin/find . -name "$@" ; }

##  ffs <starting string>: Find file whose name starts with a given string
#   -----------------------------------------------------------
function ffs () { /usr/bin/find . -name "$@"'*' ; }

##  ffe <ending string>: Find file whose name ends with a given string
#   -----------------------------------------------------------
function ffe () { /usr/bin/find . -name '*'"$@" ; }

##  spotlight <search terms>: Search for a file using MacOS Spotlight's metadata
#   -----------------------------------------------------------
function spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


#   ---------------------------
#   6.  PROCESS MANAGEMENT
#   ---------------------------

##  findPid <process name>: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
function findPid () { lsof -t -c "$@" ; }

alias memHogsTop='top -l 1 -o rsize | head -20'     #   memHogsTop:  Find memory hogs
alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'    #   memHogsPs:  Find memory hogs
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'      #   cpuHogs:  Find CPU hogs
alias topForever='top -l 9999999 -s 10 -o cpu'      #   topForever:  Continual 'top' listing (every 10 seconds)
alias ttop="top -R -F -s 10 -o rsize"       #  ttop:  Recommended 'top' invocation to minimize resources

##  my_ps: List processes owned by my user:
#   ------------------------------------------------------------
function my_ps () { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#   ---------------------------
#   7.  NETWORKING
#   ---------------------------

alias myip='curl ip.nretnil.com ; echo'             # myip:         Public facing IP Address
alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

##  ii <optional trigger>:  display useful host related informaton
#   -------------------------------------------------------------------
function ii () {
  echo -e "\n${Red}You are logged on: $NC " ; hostname
  echo -e "\n${Red}Additionnal information:$NC " ; uname -a
  echo -e "\n${Red}Users logged on:$NC " ; w -h
  echo -e "\n${Red}Current date :$NC " ; date
  echo -e "\n${Red}Machine stats :$NC " ; uptime
  echo -e "\n${Red}Current network location :$NC " ; scselect
  echo -e "\n${Red}Internal IP Address(es) :$NC " ; ifconfig | awk '/inet/ {print $2}' | grep '192\|10\|172'
  echo -e "\n${Red}Public facing IP Address :$NC " ; myip
  if [ ! -z "$@" ] ; then
    echo -e "\n${Red}DNS Configuration:$NC " ; scutil --dns
  fi
  echo
}


#   ---------------------------------------
#   8.  SYSTEMS OPERATIONS & INFORMATION
#   ---------------------------------------

alias mountReadWrite='/sbin/mount -uw /'    # mountReadWrite:   For use when booted into single-user

#   cleanupDS:  Recursively delete .DS_Store files
#   -------------------------------------------------------------------
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

#   finderShowHidden:   Show hidden files in Finder
#   finderHideHidden:   Hide hidden files in Finder
#   -------------------------------------------------------------------
alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

#   cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
#   -----------------------------------------------------------------------------------
alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

#    screensaverDesktop: Run a screensaver on the Desktop
#   -----------------------------------------------------------------------------------
alias screensaverDesktop='/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background'


#   ---------------------------------------
#   9.  WEB DEVELOPMENT
#   ---------------------------------------

alias apacheEdit="sudo $EDITOR /etc/apache2/httpd.conf"      # apacheEdit:       Edit httpd.conf
alias apacheRestart='sudo apachectl graceful'                # apacheRestart:    Restart Apache
alias apacheLogs="less +F /var/log/apache2/error_log"        # Apachelogs:   Shows apache error logs
alias editHosts='sudo $EDITOR /etc/hosts'                    # editHosts:        Edit /etc/hosts file

##  httpHeaders <website>:      Grabs headers from web page
#   -----------------------------------------------------------------------------------
function httpHeaders () { /usr/bin/curl -I -L $@ ; }

##   httpDebug <website>:  Download a web page and show info on what took time
#   -------------------------------------------------------------------
function httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }


#   ---------------------------------------
#   10.  REMINDERS & NOTES
#   ---------------------------------------

#   remove_disk: spin down unneeded disk
#   ---------------------------------------
#   diskutil eject /dev/disk1s3

#   to change the password on an encrypted disk image:
#   ---------------------------------------
#   hdiutil chpass /path/to/the/diskimage

#   to mount a read-only disk image as read-write:
#   ---------------------------------------
#   hdiutil attach example.dmg -shadow /tmp/example.shadow -noverify

#   mounting a removable drive (of type msdos or hfs)
#   ---------------------------------------
#   mkdir /Volumes/Foo
#   ls /dev/disk*   to find out the device to use in the mount command)
#   mount -t msdos /dev/disk1s1 /Volumes/Foo
#   mount -t hfs /dev/disk1s1 /Volumes/Foo

#   to create a file of a given size: /usr/sbin/mkfile or /usr/bin/hdiutil
#   ---------------------------------------
#   e.g.: mkfile 10m 10MB.dat
#   e.g.: hdiutil create -size 10m 10MB.dmg
#   the above create files that are almost all zeros - if random bytes are desired
#   then use: ~/Dev/Perl/randBytes 1048576 > 10MB.dat
